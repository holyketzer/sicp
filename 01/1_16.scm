(define (square x) (* x x))

(define (expt b n)
  (expt-iter 1 b n))

 (define (expt-iter a b n)
   (cond ((= n 0) a)
         ((even? n) (expt-iter a (square b) (/ n 2)))
         (else (expt-iter (* a b) b (- n 1)))))


(newline)
(display (expt 2 1))
(newline)
(display (expt 2 2))
(newline)
(display (expt 2 3))
(newline)
(display (expt 2 4))
(newline)
(display (expt 2 5))
(newline)
(display (expt 2 6))
(newline)
(display (expt 2 7))
(newline)
(display (expt 2 8))
(newline)
(display (expt 2 9))
(newline)
(display (expt 2 10))
(newline)

(newline)
(display (expt 3 1))
(newline)
(display (expt 3 2))
(newline)
(display (expt 3 3))
(newline)
(display (expt 3 4))
(newline)
(display (expt 3 5))